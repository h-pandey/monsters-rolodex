{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","key","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UAIaA,G,YAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBACIC,IAAM,UACNC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BAEP,wBAAIC,IAAKN,EAAMM,KAAMN,EAAMI,QAAQG,MACnC,wBAAID,IAAKN,EAAMM,KAAMN,EAAMI,QAAQI,UCN9BC,G,MAAW,SAACT,GACrB,OACI,yBAAKC,UAAU,aACVD,EAAMU,SAASC,KACZ,SAAAP,GAAO,OAAK,kBAAC,EAAD,CAAME,IAAOF,EAAQC,GAAID,QAAWA,UCLnDQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAWF,MCuCJG,E,kDA1Cb,aAAc,IAAD,8BACX,gBAgBFH,aAAe,SAAAI,GACb,EAAKC,SACH,CAACC,YAAcF,EAAEG,OAAOC,SAhB1B,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAc,IALL,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAWkB,S,oBAW3C,WACE,MAA+BC,KAAKN,MAA9Bb,EAAN,EAAMA,SAAUU,EAAhB,EAAgBA,YACVU,EAAkBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC3CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAGpD,OACE,yBAAK/B,UAAU,OACb,gDACA,kBAAC,EAAD,CACEY,YAAY,iBACZC,aAAee,KAAKf,eAEtB,kBAAC,EAAD,CAAUJ,SAAYoB,S,GArCZI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7f32fd96.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './card.style.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img \r\n            alt = 'monster'\r\n            src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        />\r\n        <h1 key={props.key}>{props.monster.name}</h1>\r\n        <h3 key={props.key}>{props.monster.email}</h3>\r\n    </div>\r\n)","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props) => {\r\n    return(\r\n        <div className=\"card-list\">\r\n            {props.monsters.map(\r\n                monster => (<Card key = {monster.id} monster = {monster}/>)\r\n            )}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input\r\n        className=\"search\"\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={ handleChange }\r\n    />\r\n)","import React, {Component} from 'react'; \nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters : [],\n      searchField : ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users') \n    .then(response => response.json())\n    .then(users => this.setState({monsters : users}));\n  };\n\n \n\n  handleChange = e => {\n    this.setState(\n      {searchField : e.target.value}\n    );\n  }\n\n  render(){\n    const{monsters, searchField} = this.state;\n    const filteredMonster = monsters.filter(monster =>\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n \n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search monster'\n          handleChange= {this.handleChange}\n        />\n        <CardList monsters = {filteredMonster} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}